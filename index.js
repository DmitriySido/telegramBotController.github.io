const TelegramAPI = require('node-telegram-bot-api');
const axios = require('axios');


const token = 'YOUR_TELEGRAM_TOKEN_IN_BOT_FATHER';
const bot = new TelegramAPI(token, {polling: true});

const screenshot = require('screenshot-desktop');
const fs = require('fs');


bot.setMyCommands([
  { command: '/action_list', description: '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π' },
  { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
]);


const errorText = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å';

bot.on('message', async (msg) => {
  const text = msg.text;
  const chatID = msg.chat.id;

  switch (text) {
    case '/action_list':
      try {
        await axios.get('http://localhost:4000/action_list');
        await bot.sendMessage(chatID, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
          reply_markup: {
            keyboard: [
              [{ text: '–°–∫—Ä–∏–Ω—à–æ—Ç üì∏' }, { text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è o —Å–∏—Å—Ç–µ–º–µ üñ•Ô∏è' }],
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å Google ü§ñ' }, { text: '–û—Ç–∫—Ä—ã—Ç—å Spotify üé∂' }],
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å YouTube üëÄ' }, { text: '–û—Ç–∫—Ä—ã—Ç—å GPT —á–∞—Ç üëª' }],
              [{ text: '–í–∫–ª—é—á–∏—Ç—å Kizzaru üé∂' }, { text: '–û—Ç–∫—Ä—ã—Ç—å ForzaHorizon5 ‚ù§' }],
              [{ text: '–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
          }
        });
      } catch (error) {
        await bot.sendMessage(chatID, '–ú–µ–Ω—é —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ!');
      }
      break;

      case '–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå':
        try {
          await axios.get('http://localhost:4000/close_menu');
          await bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ', {
            reply_markup: {
              remove_keyboard: true
            }
          });
        } catch (error) {
          bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é.');
        }
      break;

    case '–û—Ç–∫—Ä—ã—Ç—å Google ü§ñ':
      try {
        await axios.get('http://localhost:4000/open_google');
        await bot.sendMessage(chatID, 'Google –æ—Ç–∫—Ä—ã—Ç.');
      } catch (error) {
        await bot.sendMessage(chatID, `${errorText} Google.`);
      }
    break;

    case '–û—Ç–∫—Ä—ã—Ç—å GPT —á–∞—Ç üëª':
      try {
        await axios.get('http://localhost:4000/open_gpt');
        await bot.sendMessage(chatID, 'GPT –æ—Ç–∫—Ä—ã—Ç.');
      } catch (error) {
        await bot.sendMessage(chatID, `${errorText} GPT.`);
      }
    break;

    case '–û—Ç–∫—Ä—ã—Ç—å Spotify üé∂':
      try {
        await axios.get('http://localhost:4000/open_spotify');
        await bot.sendMessage(chatID, 'Spotify –æ—Ç–∫—Ä—ã—Ç.');
      } catch (error) {
        await bot.sendMessage(chatID, `${errorText} Spotify.`);
      }
    break;

    case '–û—Ç–∫—Ä—ã—Ç—å YouTube üëÄ':
      try {
        await axios.get('http://localhost:4000/open_youtube');
        await bot.sendMessage(chatID, 'YouTube –æ—Ç–∫—Ä—ã—Ç.');
      } catch (error) {
        await bot.sendMessage(chatID, `${errorText} YouTube.`);
      }
    break;

    case '–û—Ç–∫—Ä—ã—Ç—å ForzaHorizon5 ‚ù§':
      try {
        await axios.get('http://localhost:4000/open_forza5');
        await bot.sendMessage(chatID, 'Forza Horizon 5 –æ—Ç–∫—Ä—ã—Ç–∞.');
      } catch (error) {
        await bot.sendMessage(chatID, `${errorText} Forza Horizon 5.`);
      }
    break;

    case '–í–∫–ª—é—á–∏—Ç—å Kizzaru üé∂':
      try {
        await axios.get('http://localhost:4000/music');
        await bot.sendMessage(chatID, '–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
      } catch (error) {
        await bot.sendMessage(chatID, `${errorText} –º—É–∑—ã–∫—É.`);
      }
    break;

    case '–°–∫—Ä–∏–Ω—à–æ—Ç üì∏':
      try {
        const img = await screenshot({ format: 'png' });
        const filePath = './screenshot.png';
        fs.writeFileSync(filePath, img);
        await bot.sendPhoto(chatID, filePath);
        fs.unlinkSync(filePath); // –£–¥–∞–ª—è–µ–º —Å–¥–µ–ª–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
      } catch (error) {
        await bot.sendMessage(chatID, `–û—à–∏–±–∫–∞: ${error.message}`);
      }
    break;

    case '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è o —Å–∏—Å—Ç–µ–º–µ üñ•Ô∏è':
      try {
        const response = await axios.get('http://localhost:4000/system_info');
        await bot.sendMessage(chatID, response.data);
      } catch (error) {
        await bot.sendMessage(chatID, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: ${error.message}`);
      }
    break;

    case '/start':
      await bot.sendMessage(chatID, '–ü—Ä–∏–≤–µ—ÇüòÄ —è –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–≤–æ–µ–≥–æ –ü–ö, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–∂–Ω—ã–µ —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—ã —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—è –≤ –¥–µ–ª–µüòú');
    break;

    default:
      await bot.sendMessage(chatID, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –Ω–µ –∑–Ω–∞—é!');
    break;
  }
});
